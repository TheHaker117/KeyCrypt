package graphics;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;
import java.io.OutputStream;


import javafx.application.Application;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.Initializable;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.Stage;;
/**
 * 
 * @author TheHaker117
 *
 * KeyCryptWin is an interface to decrypt the info file generated by KeyCrypt
 * in .datasystem folder.
 * 
 * I tried to add music with JavaFx, but it causes problems with the lookandfeel.
 */

public class KeyCryptWin extends JFrame implements ActionListener{
	
	private JLabel text00,text01, text02, text03;
	private JTextField box01, box02;
	private JPasswordField box00;
	private JButton button00, button01, button02, button03;
	private JCheckBox cbox00;
	private JProgressBar pbar00;

	public KeyCryptWin(){
		super();	// Invocamos con super al constructor de la superclase.
		config();		
		init();		// Nel, no voy a explicar cómo hice la interfaz gráfica.
	}

	/**
	 * 
	 * @param args
	 * 
	 * Create a KeyCryptWin and set it visible.
	 * 
	 * @return void
	 * 
	 */
	
	public static void main(String[] args){
		KeyCryptWin win = new KeyCryptWin();
//		win.setDefaultLookAndFeelDecorated(true);
//		SubstanceLookAndFeel.setSkin("org.pushingpixels.substance.api.skin.GraphiteAquaSkin");
		win.setVisible(true);
	}

	/**
	 * 
	 * @param N/A
	 * @return void
	 * 
	 * Initializes the JFrame.
	 * 
	 */
	
	
	private void config(){
		this.setTitle("KeyCrypt");
		this.setSize(310, 480);
		this.setLocationRelativeTo(null);
		this.setLayout(null);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setIconImage(new ImageIcon(getClass().getResource("/stuff/icon.png")).getImage());
		this.setUndecorated(true);
		this.setDefaultLookAndFeelDecorated(true);
		this.setOpacity(0.95f);
		TitlePane tpane = new TitlePane(this);
		this.addMouseListener(tpane);
		this.addMouseMotionListener(tpane);
		
		/*
		SwingUtilities.invokeLater(new Runnable(){
			@Override
			public void run(){
				try{
					SubstanceLookAndFeel.setSkin("org.pushingpixels.substance.api.skin.GraphiteGlassSkin");
				}
				catch(Exception e){System.err.println(e);}
			}
		});*/
		
	
	}

	/**
	 * @param N/A
	 * @return void
	 * 
	 * Initializes the frame components.
	 */
	
	private void init(){
		text00 = new JLabel("PASSWORD");
		text01 = new JLabel("PATH");
		text02 = new JLabel("BYTES");
		text03 = new JLabel("Music:");
		box00 = new JPasswordField();
		box01 = new JTextField("/path/to/save");
		box02 = new JTextField("Bytes Here");
		button00 = new JButton("Browse");
		button01 = new JButton("Decrypt");
		button02 = new JButton();
		button03 = new JButton();
		cbox00 = new JCheckBox();
		pbar00 = new JProgressBar(0, 100);
		
		
		button02.setBounds(280, 10, 20, 20);
		button02.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/stuff/icon2.png")).getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));
		button02.setVisible(true);
		button02.addActionListener(this);
		button02.setFocusable(false);
		
		button03.setBounds(255, 10, 20, 20);
		button03.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/stuff/icon1.png")).getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH)));
		button03.setVisible(true);
		button03.addActionListener(this);
		button03.setFocusable(false);
		
//		text00.setText("Insert Password");
		text00.setHorizontalAlignment(JLabel.CENTER);
		text00.setBounds(60, 40, 180, 25);
		box00.setBounds(60, 70, 180, 25);
		box00.setHorizontalAlignment(JTextField.CENTER);
		box00.addFocusListener(new FocusAdapter(){
			@Override
			public void focusGained(FocusEvent f){
				box00.setText("");
			}
			
			@Override
			public void focusLost(FocusEvent f){
				if(box00.getPassword().length == 0)
					box00.setText("Password");
			}
		});
	
		text01.setHorizontalAlignment(JLabel.CENTER);
		text01.setBounds(60, 110, 180, 25);
		box01.setBounds(60, 140, 180, 25);
		box01.setHorizontalAlignment(JTextField.CENTER);
		box01.addFocusListener(new FocusAdapter(){
			@Override
			public void focusGained(FocusEvent f){
				box01.setText("");
			}
			
			@Override
			public void focusLost(FocusEvent f){
				if(box01.getText().equals(""))
					box01.setText("/path/to/save");
			}
		});
		
		
		button00.setBounds(100, 170, 90, 25);
		button00.addActionListener(this);

		text02.setHorizontalAlignment(JLabel.CENTER);
		text02.setBounds(60, 200, 180, 25);
		box02.setBounds(60, 230, 180, 25);
		box02.setHorizontalAlignment(JTextField.CENTER);
		box02.addFocusListener(new FocusAdapter(){
			@Override
			public void focusGained(FocusEvent f){
				box02.setText("");
			}
			
			@Override
			public void focusLost(FocusEvent f){
				if(box02.getText().equals(""))
					box02.setText("Bytes Here");
			}
		});
		
		
		button01.setBounds(50, 270, 200, 30);
		button01.addActionListener(this);
		
		pbar00.setBounds(50, 350, 200, 50);
		pbar00.setIndeterminate(false);
		pbar00.setMaximum(100);
		pbar00.setStringPainted(true);
		
		text03.setBounds(60, 12, 60, 21);
		cbox00.setBounds(100, 14, 20, 20);
		cbox00.setVisible(true);
		cbox00.setFocusable(false);
		
		this.add(text00);
		this.add(text01);
		this.add(text02);
		this.add(text03);
		this.add(box00);
		this.add(box01);
		this.add(box02);
		this.add(button00);
		this.add(button01);
		this.add(button02);
		this.add(button03);
		this.add(cbox00);
		this.add(pbar00);
		
//		player.play();
		
	}

	/**
	 * 
	 * @param ActionEvent e
	 * @return void
	 * 
	 * Events control function.
	 * 
	 */
	
	
	@Override
	public void actionPerformed(ActionEvent e){
		pbar00.setValue(0);
		
		if(e.getSource() == button00){
			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			int seleccion = fileChooser.showOpenDialog(null);

			if (seleccion == JFileChooser.APPROVE_OPTION){
   				File fichero = fileChooser.getSelectedFile();
   				box01.setText(fichero.getPath());
			}
		}

		if(e.getSource() == button01)
			new Task(pbar00, String.valueOf(box00.getPassword()), box01.getText(), box02.getText()).execute();

		if(e.getSource() == button02)
			System.exit(1);
		
		if(e.getSource() == button03)
			this.setState(JFrame.ICONIFIED);
	/*
		if(e.getSource() == cbox00){
			if(cbox00.isSelected())
				player.play();
			else
				player.pause();
		}*/
	}
	
	/**
	 * 
	 * @param bytes
	 * @return
	 * 
	 * Sets format of the bytes string.
	 */
	
	private byte[] setFormat(String bytes){
		String[] fbytes = bytes.replace('.', ' ').split(" ");	// Limpiamos los bytes de entrada.
		byte[] filebytes = new byte[fbytes.length];

		for(int i = 0; i < fbytes.length; i++)
			filebytes[i] = Byte.valueOf(fbytes[i]);				// Pasamos los bytes ya limpios a un array de bytes 
		
		return filebytes;
	}
	
	/**
	 * 
	 * @author TheHaker117
	 *
	 * Private class for drag the frame.
	 *
	 */
	
	private static class TitlePane extends MouseAdapter{
		private final JFrame frame;
		private Point point00, point01;
		
		public TitlePane(JFrame frame){
			this.frame = frame;
		}
		
		public void mouseReleased(MouseEvent e){
			point00 = null;
		}
		
		public void mousePressed(MouseEvent e){
			point00 = e.getPoint();
		}
		
		public void mouseDragged(MouseEvent e){
			point01 = e.getLocationOnScreen();
			frame.setLocation(point01.x - point00.x, point01.y - point00.y);
		}
	}
	
	/**
	 * 
	 * @author TheHaker117
	 *
	 * Private class for implement a JProgressBar with process in background.
	 * Decrypts the bytes given.
	 *
	 */
	
	private class Task extends SwingWorker<Void, Integer> {

		JProgressBar pbar00;
		String password, path, bytes;
		
		public Task(JProgressBar pbar, String password, String path, String bytes){
			this.pbar00 = pbar;
			this.password = password;
			this.bytes = bytes;
			this.path = path;
		}
		
		public void process(List<Integer> vals) {
			pbar00.setValue(vals.get(0));
		}
		
		
        public Void doInBackground() throws Exception {
        	
        	String[] fbytes = bytes.replace('.', ' ').split(" ");	// Limpiamos los bytes de entrada.
        	byte[] filebytes = new byte[fbytes.length];
        	
        	publish(25);
        	Thread.sleep(1000);
        	
        	for(int i = 0; i < fbytes.length; i++){
        		filebytes[i] = Byte.valueOf(fbytes[i]);				// Pasamos los bytes ya limpios a un array de bytes
        	}
        	
        	publish(50);
        	Thread.sleep(1000);
        	
        	Cipher cipher_AES = Cipher.getInstance("AES");				// Realizamos el mismo proceso que se hizo para encriptar.
        	MessageDigest md = MessageDigest.getInstance("SHA-256");	// Solo que ahora desencriptamos.
        	md.update(password.getBytes("UTF-8"));
        	byte[] passBytesCrypt = md.digest();
        	
        	if(System.getProperty("os.name").toLowerCase().contains("windows"))
        		cipher_AES.init(Cipher.DECRYPT_MODE, new SecretKeySpec(Arrays.copyOf(passBytesCrypt, 16), "AES"));
        	
        	else
        		cipher_AES.init(Cipher.DECRYPT_MODE, new SecretKeySpec(passBytesCrypt, "AES"));
        	
        	byte[] decryptfilebytes = cipher_AES.doFinal(filebytes);

//    			Path pathfile = Paths.get(path + "/text.txt");
        	
        	
        	int i = 0;
        	Path pathfile = Paths.get(path + "/text" + String.valueOf(i) +  ".txt");
        	
        	while(Files.exists(pathfile))
        		pathfile = Paths.get(path + "/text" + String.valueOf(++i) +  ".txt");
        	
        	Files.write(pathfile, decryptfilebytes);
        	
        	publish(100);
        	Thread.sleep(9000);
        	
        	return null;
        }
 
        public void done() {
            
        }
    }
}

